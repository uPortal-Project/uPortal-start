import java.nio.file.Paths

/*
 * Allows a collection of Java versions to be supported.
 * If the currect Java version is unsupported, it will stop the current task execution.
 */
task javaVersionCheck() {
    group 'Verification'
    description 'Ensures the current Java version is supported'
    
    doLast {
        def supportedJavaVersions = [ JavaVersion.VERSION_11, JavaVersion.VERSION_1_8 ];
        def currentJavaVersion = JavaVersion.current();
        if (!supportedJavaVersions.contains(currentJavaVersion)) {
            throw new GradleException("Incorrect Java version; found ${currentJavaVersion} but supported versions are:  ${supportedJavaVersions}");
        }
        logger.lifecycle("Java version OK:  ${currentJavaVersion}" )
    }
}

/*
 * Loads the buildProperties collection, which is used by the uPortal-start CLI tools.  All of
 * these properties support (pretty much) the same flexible options for setting them.  In order of
 * priority (top priority first), they are:
 *
 *   - A JVM argument
 *   - Environment variable (only PORTAL_HOME, CATALINA_HOME, CATALINA_BASE)
 *   - (Optional) build.properties file
 *   - The default value
 *
 * Some defaults are defined in buildSrc/src/main/resources/buildDefaults.properties;  others are
 * calculated.
 */
task portalProperties() {
    group 'Portal'
    description 'Loads properties for the CLI tools for Packaging, Deploying, and Database Import/Export'
    
    doLast() {

        /*
         * The Properties object we need to load already exists.
         */
        Properties buildProperties = rootProject.ext['buildProperties']

        /*
         * Step One:  buildDefaults.properties from the classpath.
         */
        InputStream defaults = this.getClass().getClassLoader().getResourceAsStream('buildDefaults.properties')
        if (defaults == null) {
            // The defaults.properties is missing;  this situation is untenable
            throw new GradleScriptException('buildDefaults.properties file not found')
        }
        buildProperties.load(defaults)

        /*
         * Step Two:  build.properties in the root of the project (if present).
         */
        def buildPropsFile = file('build.properties')
        if (buildPropsFile.exists()) {
            // Anything in here trumps what we loaded earlier...
            Properties localBuildProps = new Properties()
            buildPropsFile.withInputStream { localBuildProps.load(it) }
            localBuildProps.forEach { key, value ->
                buildProperties.setProperty(key, value)
            }
        } else {
            logger.lifecycle('No build.properties file found;  continuing with default build settings')
        }

        /*
         * Step Three:  if CATALINA_HOME, CATALINA_BASE, and/or PORTAL_HOME environment variables
         * are set, honor them now.
         */
        if (System.getenv('CATALINA_HOME')) {
            buildProperties.setProperty('server.home', System.getenv('CATALINA_HOME'))
        }
        if (System.getenv('CATALINA_BASE')) {
            buildProperties.setProperty('server.base', System.getenv('CATALINA_BASE'))
        }
        if (System.getenv('PORTAL_HOME')) {
            buildProperties.setProperty('portal.home', System.getenv('PORTAL_HOME'))
        }

        /*
         * Step Four:  JVM arguments that override values we already have.
         */
        buildProperties.forEach { key, value ->
            String jvmArgValue = System.getProperty(key)
            if (jvmArgValue) {
                logger.lifecycle("Found JVM override value of '${jvmArgValue}' for build property '${key}'")
                buildProperties.setProperty(key, jvmArgValue)
            }
        }

        /*
         * At this point, any property MAY have a value, and some properties MUST have a value.
         * Properties that have a value at this point are done;  but some properties have defaults
         * that must be calculated if absent.
         */

        /*
         * Step Five:  Calculate server.base (if absent)
         */
        if (!buildProperties.containsKey('server.base')) {
            // Still need to check for a JVM argument...
            String serverBase = System.getProperty('server.base') ?: buildProperties.getProperty('server.home')
            buildProperties.setProperty('server.base', serverBase)
        }

        /*
         * Step Six:  Calculate portal.home (if absent)
         */
        if (!buildProperties.containsKey('portal.home')) {
            // Still need to check for a JVM argument...
            String portalHome = System.getProperty('portal.home') ?: "${buildProperties.getProperty('server.base')}/portal"
            buildProperties.setProperty('portal.home', portalHome)
        }

        /*
         * List the complete set of build properties to the console.
         */
        logger.lifecycle('Using the following build properties:')
        buildProperties.forEach { key, value ->
            logger.lifecycle("  -> ${key}=${value}")
        }

    }
}
